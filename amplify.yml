version: 1
applications:
  - appRoot: .
    env:
      variables:
        AMPLIFY_MONOREPO_APP_ROOT: "."
    frontend:
      framework: nextjs
      buildPath: / # run install/build from repo root
      phases:
        preBuild:
          commands:
            - echo "AMPLIFY_MONOREPO_APP_ROOT = $AMPLIFY_MONOREPO_APP_ROOT"
            - nvm install 22.15.1
            - nvm use 22.15.1
            - node --version
            - npm --version
            - npm install -g pnpm@latest
            - pnpm --version
            - rm -rf node_modules .next
            - |
              if pnpm install --frozen-lockfile --dry-run 2>/dev/null; then
                pnpm install --frozen-lockfile
              else
                pnpm install
              fi
            - pnpm --filter="@captify/api" run build || (echo "❌ @captify/api build failed" && exit 1)
            - pnpm --filter="@captify/core" run build || (echo "❌ @captify/core build failed" && exit 1)
            - pnpm --filter="@captify/veripicks" run build || (echo "❌ @captify/veripicks build failed" && exit 1)
            - test -n "${NEXTAUTH_URL}" || (echo "❌ NEXTAUTH_URL is required" && exit 1)
            - test -n "${NEXTAUTH_SECRET}" || (echo "❌ NEXTAUTH_SECRET is required" && exit 1)
            - test -n "${NEXT_PUBLIC_COGNITO_CLIENT_ID}" || (echo "❌ NEXT_PUBLIC_COGNITO_CLIENT_ID is required" && exit 1)
            - test -n "${COGNITO_CLIENT_SECRET}" || (echo "❌ COGNITO_CLIENT_SECRET is required" && exit 1)
            - test -n "${ACCESS_KEY_ID}" || (echo "❌ ACCESS_KEY_ID is required" && exit 1)
            - test -n "${SECRET_ACCESS_KEY}" || (echo "❌ SECRET_ACCESS_KEY is required" && exit 1)
            - test -n "${MI_DYNAMODB_TABLE}" || (echo "❌ MI_DYNAMODB_TABLE is required" && exit 1)
        build:
          commands:
            - |
              cat > .env.production << EOF
              NODE_ENV=production
              NEXTAUTH_URL=${NEXTAUTH_URL}
              NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
              OPENAI_API_KEY=${OPENAI_API_KEY}
              ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
              AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
              AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
              GROQ_API_KEY=${GROQ_API_KEY}
              NEXT_PUBLIC_COGNITO_CLIENT_ID=${NEXT_PUBLIC_COGNITO_CLIENT_ID}
              NEXT_PUBLIC_COGNITO_ISSUER=${NEXT_PUBLIC_COGNITO_ISSUER}
              NEXT_PUBLIC_BEDROCK_AGENT_ID=${NEXT_PUBLIC_BEDROCK_AGENT_ID}
              COGNITO_CLIENT_SECRET=${COGNITO_CLIENT_SECRET}
              COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID}
              COGNITO_IDENTITY_POOL_ID=${COGNITO_IDENTITY_POOL_ID}
              COGNITO_SERVICE_CATALOG_POOL_ID=${COGNITO_SERVICE_CATALOG_POOL_ID}
              COGNITO_DOMAIN=${COGNITO_DOMAIN}
              REGION=${REGION}
              ACCESS_KEY_ID=${ACCESS_KEY_ID}
              SECRET_ACCESS_KEY=${SECRET_ACCESS_KEY}
              BEDROCK_AGENT_ID=${BEDROCK_AGENT_ID}
              BEDROCK_AGENT_ALIAS_ID=${BEDROCK_AGENT_ALIAS_ID}
              S3_BUCKET=${S3_BUCKET}
              S3_REGION=${S3_REGION}
              DYNAMODB_APPLICATIONS_TABLE=${DYNAMODB_APPLICATIONS_TABLE}
              DYNAMODB_USER_APPLICATION_STATE_TABLE=${DYNAMODB_USER_APPLICATION_STATE_TABLE}
              DYNAMODB_ORGANIZATION_SETTINGS_TABLE=${DYNAMODB_ORGANIZATION_SETTINGS_TABLE}
              DYNAMODB_MENU_ITEMS_TABLE=${DYNAMODB_MENU_ITEMS_TABLE}
              DYNAMODB_WORKSPACE_CONTENT_TABLE=${DYNAMODB_WORKSPACE_CONTENT_TABLE}
              DYNAMODB_CHAT_TABLE=${DYNAMODB_CHAT_TABLE}
              MI_DYNAMODB_TABLE=${MI_DYNAMODB_TABLE}
              AGENTS_TABLE_NAME=${AGENTS_TABLE_NAME}
              AGENT_JOBS_TABLE_NAME=${AGENT_JOBS_TABLE_NAME}
              API_GATEWAY_URL=${API_GATEWAY_URL}
              DEBUG_MODE=${DEBUG_MODE}
              EOF
            - export NEXT_PUBLIC_COGNITO_CLIENT_ID=${NEXT_PUBLIC_COGNITO_CLIENT_ID}
            - export NEXT_PUBLIC_COGNITO_ISSUER=${NEXT_PUBLIC_COGNITO_ISSUER}
            - export NEXT_PUBLIC_BEDROCK_AGENT_ID=${NEXT_PUBLIC_BEDROCK_AGENT_ID}
            - pnpm run type-check
            - pnpm run lint
            - pnpm run build
            - cp .env.production .next/
        postBuild:
          commands:
            - test -f .next/BUILD_ID || (echo "❌ BUILD_ID not found" && exit 1)
            - test -d .next/static || (echo "❌ Static assets not found" && exit 1)
      artifacts:
        baseDirectory: .next # relative to buildPath (which is /)
        files:
          - "**/*"
      cache:
        paths:
          - .next/cache/**/*
          - node_modules/.pnpm/**/*
          - ~/.pnpm-store/**/*
