version: 1
frontend:
  phases:
    preBuild:
      commands:
        # Set up Node.js environment
        - echo "Setting up Node.js environment..."
        - nvm install 22.15.1
        - nvm use 22.15.1
        - node --version
        - npm --version

        # Install pnpm and dependencies
        - echo "Installing pnpm and dependencies..."
        - npm install -g pnpm@latest
        - pnpm --version
        # Skip store prune in Amplify build environment
        # - pnpm store prune

        # Clean install to ensure consistency
        - rm -rf node_modules
        - rm -rf .next

        # Check if lockfile is outdated and handle appropriately
        - echo "Checking lockfile status..."
        - |
          if pnpm install --frozen-lockfile --dry-run 2>/dev/null; then
            echo "✅ Lockfile is up to date, installing with frozen lockfile..."
            pnpm install --frozen-lockfile
          else
            echo "⚠️  Installing dependencies without frozen lockfile..."
            pnpm install
            echo "✅ Dependencies installed successfully"
          fi

        # Debug: Check if node_modules exists and has expected structure
        - echo "Debugging node_modules structure..."
        - ls -la node_modules/ | head -5 || echo "No node_modules directory"
        - ls -la node_modules/.bin/ | head -5 || echo "No .bin directory"

        # Verify dependencies installation and build workspace packages
        - echo "Verifying dependencies..."
        - pnpm list --depth=0 | grep -E "(turbo|typescript)" || echo "Key dependencies verification"
        
        # Build workspace packages
        - echo "Building workspace packages..."
        - pnpm run build:packages

        # Verify critical environment variables
        - echo "Verifying critical environment variables..."
        - test -n "${NEXTAUTH_URL}" || (echo "❌ NEXTAUTH_URL is required" && exit 1)
        - test -n "${NEXTAUTH_SECRET}" || (echo "❌ NEXTAUTH_SECRET is required" && exit 1)
        - test -n "${NEXT_PUBLIC_COGNITO_CLIENT_ID}" || (echo "❌ NEXT_PUBLIC_COGNITO_CLIENT_ID is required" && exit 1)
        - test -n "${COGNITO_CLIENT_SECRET}" || (echo "❌ COGNITO_CLIENT_SECRET is required" && exit 1)
        - test -n "${ACCESS_KEY_ID}" || (echo "❌ ACCESS_KEY_ID is required" && exit 1)
        - test -n "${SECRET_ACCESS_KEY}" || (echo "❌ SECRET_ACCESS_KEY is required" && exit 1)
        - test -n "${MI_DYNAMODB_TABLE}" || (echo "❌ MI_DYNAMODB_TABLE is required for MI APIs" && exit 1)
        - echo "✅ Critical environment variables verified"

    build:
      commands:
        - echo "🚀 Starting production build..."

        # Create production environment file
        - echo "Creating .env.production..."
        - |
          cat > .env.production << EOF
          NODE_ENV=production
          NEXTAUTH_URL=${NEXTAUTH_URL}
          NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
          OPENAI_API_KEY=${OPENAI_API_KEY}
          ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
          AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
          AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
          GROQ_API_KEY=${GROQ_API_KEY}
          NEXT_PUBLIC_COGNITO_CLIENT_ID=${NEXT_PUBLIC_COGNITO_CLIENT_ID}
          NEXT_PUBLIC_COGNITO_ISSUER=${NEXT_PUBLIC_COGNITO_ISSUER}
          NEXT_PUBLIC_BEDROCK_AGENT_ID=${NEXT_PUBLIC_BEDROCK_AGENT_ID}
          COGNITO_CLIENT_SECRET=${COGNITO_CLIENT_SECRET}
          COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID}
          COGNITO_IDENTITY_POOL_ID=${COGNITO_IDENTITY_POOL_ID}
          COGNITO_SERVICE_CATALOG_POOL_ID=${COGNITO_SERVICE_CATALOG_POOL_ID}
          COGNITO_DOMAIN=${COGNITO_DOMAIN}
          REGION=${REGION}
          ACCESS_KEY_ID=${ACCESS_KEY_ID}
          SECRET_ACCESS_KEY=${SECRET_ACCESS_KEY}
          BEDROCK_AGENT_ID=${BEDROCK_AGENT_ID}
          BEDROCK_AGENT_ALIAS_ID=${BEDROCK_AGENT_ALIAS_ID}
          S3_BUCKET=${S3_BUCKET}
          S3_REGION=${S3_REGION}
          DYNAMODB_APPLICATIONS_TABLE=${DYNAMODB_APPLICATIONS_TABLE}
          DYNAMODB_USER_APPLICATION_STATE_TABLE=${DYNAMODB_USER_APPLICATION_STATE_TABLE}
          DYNAMODB_ORGANIZATION_SETTINGS_TABLE=${DYNAMODB_ORGANIZATION_SETTINGS_TABLE}
          DYNAMODB_MENU_ITEMS_TABLE=${DYNAMODB_MENU_ITEMS_TABLE}
          DYNAMODB_WORKSPACE_CONTENT_TABLE=${DYNAMODB_WORKSPACE_CONTENT_TABLE}
          DYNAMODB_CHAT_TABLE=${DYNAMODB_CHAT_TABLE}
          MI_DYNAMODB_TABLE=${MI_DYNAMODB_TABLE}
          AGENTS_TABLE_NAME=${AGENTS_TABLE_NAME}
          AGENT_JOBS_TABLE_NAME=${AGENT_JOBS_TABLE_NAME}
          API_GATEWAY_URL=${API_GATEWAY_URL}
          DEBUG_MODE=${DEBUG_MODE}
          EOF

        # Export public environment variables for build
        - export NEXT_PUBLIC_COGNITO_CLIENT_ID=${NEXT_PUBLIC_COGNITO_CLIENT_ID}
        - export NEXT_PUBLIC_COGNITO_ISSUER=${NEXT_PUBLIC_COGNITO_ISSUER}
        - export NEXT_PUBLIC_BEDROCK_AGENT_ID=${NEXT_PUBLIC_BEDROCK_AGENT_ID}

        # Run type checking before build
        - echo "Running type check..."
        - pnpm run type-check

        # Run linting
        - echo "Running linting..."
        - pnpm run lint

        # Build the application
        - echo "Building Next.js application..."
        - pnpm run build

        # Copy environment file to build output
        - cp .env.production .next/

        # Verify build output
        - echo "✅ Build completed successfully"
        - ls -la .next/

  artifacts:
    baseDirectory: .next
    files:
      - "**/*"
    excludePaths:
      - node_modules/**/*
      - .git/**/*
      - "*.log"
      - coverage/**/*

  cache:
    paths:
      - .next/cache/**/*
      - node_modules/.pnpm/**/*
      - ~/.pnpm-store/**/*
